version: '3.8'

services:
  # Core Database Services
  postgres:
    image: postgres:15
    container_name: zehraguard-postgres
    environment:
      POSTGRES_DB: zehraguard
      POSTGRES_USER: zehraguard
      POSTGRES_PASSWORD: secure_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./core/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - zehraguard-network

  # Time Series Database for Behavioral Data
  influxdb:
    image: influxdb:2.7
    container_name: zehraguard-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: admin_password_123
      DOCKER_INFLUXDB_INIT_ORG: zehraguard
      DOCKER_INFLUXDB_INIT_BUCKET: behavioral_data
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: zehraguard-super-secret-auth-token
    volumes:
      - influx_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    networks:
      - zehraguard-network

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: zehraguard-redis
    command: redis-server --requirepass redis_password_123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - zehraguard-network

  # Message Queue for Event Processing
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: zehraguard-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: zehraguard
      RABBITMQ_DEFAULT_PASS: rabbitmq_password_123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    networks:
      - zehraguard-network

  # Core Processing Engine
  core-engine:
    build:
      context: ./core
      dockerfile: Dockerfile
    container_name: zehraguard-core
    environment:
      DATABASE_URL: postgresql://zehraguard:secure_password_123@postgres:5432/zehraguard
      REDIS_URL: redis://:redis_password_123@redis:6379/0
      RABBITMQ_URL: amqp://zehraguard:rabbitmq_password_123@rabbitmq:5672/
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: zehraguard-super-secret-auth-token
      INFLUXDB_ORG: zehraguard
      INFLUXDB_BUCKET: behavioral_data
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - influxdb
    ports:
      - "8000:8000"
    volumes:
      - ./core:/app
      - ./ml/models:/app/models
    networks:
      - zehraguard-network

  # ML Training Service
  ml-service:
    build:
      context: ./ml
      dockerfile: Dockerfile
    container_name: zehraguard-ml
    environment:
      DATABASE_URL: postgresql://zehraguard:secure_password_123@postgres:5432/zehraguard
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: zehraguard-super-secret-auth-token
      INFLUXDB_ORG: zehraguard
      INFLUXDB_BUCKET: behavioral_data
    depends_on:
      - postgres
      - influxdb
    volumes:
      - ./ml:/app
      - ./ml/models:/app/models
      - ml_models:/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - zehraguard-network

  # Web Dashboard
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: zehraguard-dashboard
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000/ws
    depends_on:
      - core-engine
    ports:
      - "3000:3000"
    volumes:
      - ./dashboard:/app
      - /app/node_modules
    networks:
      - zehraguard-network

  # Agent Manager Service
  agent-manager:
    build:
      context: ./agents
      dockerfile: Dockerfile.manager
    container_name: zehraguard-agent-manager
    environment:
      DATABASE_URL: postgresql://zehraguard:secure_password_123@postgres:5432/zehraguard
      RABBITMQ_URL: amqp://zehraguard:rabbitmq_password_123@rabbitmq:5672/
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - "8001:8001"
    volumes:
      - ./agents:/app
    networks:
      - zehraguard-network

  # Elasticsearch for Log Analysis (Optional SIEM integration)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: zehraguard-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - zehraguard-network

  # Kibana for Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: zehraguard-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - zehraguard-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: zehraguard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - core-engine
      - dashboard
    networks:
      - zehraguard-network

volumes:
  postgres_data:
  influx_data:
  redis_data:
  rabbitmq_data:
  es_data:
  ml_models:

networks:
  zehraguard-network:
    driver: bridge
