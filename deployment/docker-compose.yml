version: '3.8'

services:
  # Core Database Services
  postgres:
    image: postgres:15
    container_name: zehraguard-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-zehraguard}
      POSTGRES_USER: ${POSTGRES_USER:-zehraguard}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./core/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - zehraguard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-zehraguard}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Time Series Database for Behavioral Data
  influxdb:
    image: influxdb:2.7
    container_name: zehraguard-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USER:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD:-admin_password_123}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG:-zehraguard}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET:-behavioral_data}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN:-zehraguard-super-secret-auth-token}
    volumes:
      - influx_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    networks:
      - zehraguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: zehraguard-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - zehraguard-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Message Queue for Event Processing
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: zehraguard-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-zehraguard}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq_password_123}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    networks:
      - zehraguard-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Core API Service
  zehraguard-core:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.core
    container_name: zehraguard-core
    environment:
      # Database Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-zehraguard}
      POSTGRES_USER: ${POSTGRES_USER:-zehraguard}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_123}
      
      # InfluxDB Configuration
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN:-zehraguard-super-secret-auth-token}
      INFLUXDB_ORG: ${INFLUXDB_ORG:-zehraguard}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET:-behavioral_data}
      
      # RabbitMQ Configuration
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-zehraguard}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_password_123}
      
      # Application Configuration
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      DEBUG: ${DEBUG:-false}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./ml/models:/app/models
      - ./logs:/app/logs
    networks:
      - zehraguard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Web Dashboard
  zehraguard-dashboard:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.dashboard
    container_name: zehraguard-dashboard
    environment:
      REACT_APP_API_URL: ${API_URL:-http://localhost:8000}
      REACT_APP_WS_URL: ${WS_URL:-ws://localhost:8000/ws}
    depends_on:
      zehraguard-core:
        condition: service_healthy
    ports:
      - "3000:80"
    networks:
      - zehraguard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: zehraguard-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - zehraguard-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: zehraguard-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: 'false'
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - zehraguard-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: zehraguard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/ssl:/etc/nginx/ssl
    depends_on:
      - zehraguard-core
      - zehraguard-dashboard
    networks:
      - zehraguard-network
    restart: unless-stopped

volumes:
  postgres_data:
  influx_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  zehraguard-network:
    driver: bridge
